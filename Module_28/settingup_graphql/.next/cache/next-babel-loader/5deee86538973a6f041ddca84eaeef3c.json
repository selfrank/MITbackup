{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sarah\\\\MIT_xpro\\\\Module_28\\\\settingup_graphql\\\\components\\\\dishesList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    restaurant(id: $id) {\\n      id\\n      name\\n      dishes {\\n        id\\n        name\\n        description\\n        price\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction DishesList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      dishesID = _useState[0],\n      setDishesID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANT_DISHES = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANT_DISHES),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Not found\"); //console.log(`Query Data: ${data.restaurants}`);\n\n  var searchQuery = data.restaurants.dishes.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n  var restId = searchQuery[0] ? searchQuery[0].id : null; //console.log(\"restId: \", restId);\n  // definet renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\" + res.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, res.name))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(DishesList, \"Q/qUM03Y5mpWOAuybeHl4pPQe4s=\", false, function () {\n  return [useQuery];\n});\n\n_c = DishesList;\nexport default DishesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DishesList\");","map":{"version":3,"sources":["C:/Users/sarah/MIT_xpro/Module_28/settingup_graphql/components/dishesList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","DishesList","props","dishesID","setDishesID","cart","state","setState","GET_RESTAURANT_DISHES","loading","error","data","searchQuery","restaurants","dishes","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","restaurantID","length","restList","map","margin","height","image","url","description","setRestaurantID"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAGA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;;AAYA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAAA;;AAAA,kBACOZ,QAAQ,CAAC,CAAD,CADf;AAAA,MAClBa,QADkB;AAAA,MACRC,WADQ;;AAAA,oBAERf,UAAU,CAACE,UAAD,CAFF;AAAA,MAEjBc,IAFiB,eAEjBA,IAFiB;;AAAA,mBAGCf,QAAQ,CAACe,IAAD,CAHT;AAAA,MAGlBC,KAHkB;AAAA,MAGXC,QAHW;;AAIzB,MAAMC,qBAAqB,GAAGtB,GAAH,mBAA3B;;AAJyB,kBAqBQC,QAAQ,CAACqB,qBAAD,CArBhB;AAAA,MAqBjBC,OArBiB,aAqBjBA,OArBiB;AAAA,MAqBRC,KArBQ,aAqBRA,KArBQ;AAAA,MAqBDC,IArBC,aAqBDA,IArBC;;AAsBzB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,CAxBc,CAyBzB;;AAIA,MAAIC,WAAW,GAAGD,IAAI,CAACE,WAAL,CAAiBC,MAAjB,CAAwBC,MAAxB,CAA+B,UAACC,GAAD,EAAS;AACxD,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCjB,KAAK,CAACkB,MAAtC,CAAP;AACD,GAFiB,KAEZ,EAFN;AAIA,MAAIC,MAAM,GAAGT,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,CAAeU,EAAhC,GAAqC,IAAlD,CAjCyB,CAkC3B;AACE;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAAkB;AACrC,WAAQ,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR;AACD,GAFD;;AAGA,MAAIZ,WAAW,CAACa,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,QAAMC,QAAQ,GAAGd,WAAW,CAACe,GAAZ,CAAgB,UAACX,GAAD;AAAA,aAC/B,MAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAmB,QAAA,GAAG,EAAEA,GAAG,CAACM,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,OAAD;AACE,QAAA,GAAG,EAAE,IADP;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAFT;AAGE,QAAA,GAAG,EACD,0BAA0Bb,GAAG,CAACc,KAAJ,CAAUC,GAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAWf,GAAG,CAACgB,WAAf,CADF,CARF,EAWE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE;AAAA,iBAAMC,eAAe,CAACjB,GAAG,CAACM,EAAL,CAArB;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8DN,GAAG,CAACC,IAAlE,CAFF,CAXF,CADF,CAD+B;AAAA,KAAhB,CAAjB;AAsBA,WAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGS,QADH,CADF,EAKE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,YAAY,CAACC,YAAD,CADf,CALF,CAFF;AAcD,GArCD,MAqCO;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;AACF;;GA/EQvB,U;UAqB0Bd,Q;;;KArB1Bc,U;AAgFT,eAAeA,UAAf","sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport Dishes from \"./dishes\"\r\nimport { useContext, useState } from 'react';\r\n\r\n\r\nimport AppContext from \"./context\"\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardText,\r\n  CardTitle,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\nfunction DishesList(props) {\r\n  const [dishesID, setDishesID] = useState(0)\r\n  const { cart } = useContext(AppContext);\r\n  const [state, setState] = useState(cart)\r\n  const GET_RESTAURANT_DISHES = gql`\r\n  query {\r\n    restaurant(id: $id) {\r\n      id\r\n      name\r\n      dishes {\r\n        id\r\n        name\r\n        description\r\n        price\r\n        image {\r\n          url\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES)\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>ERROR</p>;\r\n  if (!data) return <p>Not found</p>;\r\n  //console.log(`Query Data: ${data.restaurants}`);\r\n \r\n\r\n\r\n  let searchQuery = data.restaurants.dishes.filter((res) => {\r\n    return res.name.toLowerCase().includes(props.search)\r\n  }) || [];\r\n\r\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\r\n//console.log(\"restId: \", restId);\r\n  // definet renderer for Dishes\r\n  const renderDishes = (restaurantID) => {\r\n    return (<Dishes restId={restaurantID}> </Dishes>)\r\n  };\r\n  if (searchQuery.length > 0) {\r\n    const restList = searchQuery.map((res) => (\r\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\r\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\r\n          <CardImg\r\n            top={true}\r\n            style={{ height: 200 }}\r\n            src={\r\n              `http://localhost:1337` + res.image.url\r\n            }\r\n          />\r\n          <CardBody>\r\n            <CardText>{res.description}</CardText>\r\n          </CardBody>\r\n          <div className=\"card-footer\">\r\n          \r\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\r\n\r\n          </div>\r\n        </Card>\r\n      </Col>\r\n    ))\r\n\r\n    return (\r\n\r\n      <Container>\r\n        <Row xs='3'>\r\n          {restList}\r\n        </Row>\r\n\r\n        <Row xs='3'>\r\n          {renderDishes(restaurantID)}\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n    )\r\n  } else {\r\n    return <h1> No Restaurants Found</h1>\r\n  }\r\n}\r\nexport default DishesList"]},"metadata":{},"sourceType":"module"}