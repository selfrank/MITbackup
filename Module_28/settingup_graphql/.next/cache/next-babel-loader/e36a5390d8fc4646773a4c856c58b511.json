{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sarah\\\\MIT_xpro\\\\Module_28\\\\settingup_graphql\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  \\n  query {\\n    restaurants {\\n      id\\n      name\\n      description\\n      image {\\n        url\\n      }\\n      dishes{\\n      id\\n      name\\n      description\\n      price\\n      image {\\n        url\\n      }\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(1),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var link = new HttpLink({\n    uri: \"\".concat(API_URL, \"/graphql\")\n  });\n  var client = new ApolloClient({\n    link: link,\n    cache: cache\n  });\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Not found\"); //console.log(`Query Data: ${data.restaurants}`);\n\n  var searchQuery = data.restaurants.filter(function (res) {\n    console.log(\"restList res:\", res);\n    return res.name.toLowerCase().includes(props.search);\n  }) || []; // let currentRest = searchQuery\n  //console.log(\"rest currentRest:\",currentRest);\n  //let dishes = restaurant;\n  //console.log(\"dishes searchQuery: \",searchQuery)\n  //console.log(\"restList data.restaurants.dishes: \",data.restaurant.dishes:[dish] )\n\n  var restId = searchQuery[0] ? searchQuery[0].id : null; //console.log(\"restlist searchQuery: \", searchQuery);\n  // definet renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\" + res.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, res.name))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, restList), __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \" Dish Search\"), __jsx(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, __jsx(InputGroupAddon, {\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \" Search \"), __jsx(Input, {\n      onChange: function onChange(e) {\n        return setQuery(e.target.value.toLocaleLowerCase());\n      },\n      value: query,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    })), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 26\n      }\n    })), __jsx(Dishes, {\n      search: query,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    })), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"/49jSOdjjNtbAPrOfO8GtC5rv0E=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/sarah/MIT_xpro/Module_28/settingup_graphql/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","link","uri","API_URL","client","cache","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchQuery","restaurants","filter","res","console","log","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","margin","height","image","url","description","e","setQuery","target","value","toLocaleLowerCase","query"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\nimport {ApolloProvider,ApolloClient,HttpLink, InMemoryCache} from '@apollo/client';\n\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(1)\n  const link = new HttpLink({ uri: `${API_URL}/graphql`})\n  const client = new ApolloClient({link,cache});\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n  \n  query {\n    restaurants {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes{\n      id\n      name\n      description\n      price\n      image {\n        url\n      }\n      }\n    }\n  }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  //console.log(`Query Data: ${data.restaurants}`);\n\n\n\n\n  let searchQuery = data.restaurants.filter((res) => {\n    console.log(\"restList res:\", res)\n    return res.name.toLowerCase().includes(props.search)\n  }) ||[];\n\n // let currentRest = searchQuery\n  //console.log(\"rest currentRest:\",currentRest);\n\n  \n\n  \n  //let dishes = restaurant;\n  //console.log(\"dishes searchQuery: \",searchQuery)\n  //console.log(\"restList data.restaurants.dishes: \",data.restaurant.dishes:[dish] )\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n//console.log(\"restlist searchQuery: \", searchQuery);\n  // definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return (<Dishes restId={restaurantID} > </Dishes>)\n  };\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={\n              `http://localhost:1337` + res.image.url\n            }\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n          \n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\n\n          </div>\n        </Card>\n      </Col>\n    ))\n\n    return (\n\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n        <ApolloProvider client={client}>\n          <div className=\"search\">\n          <h2> Dish Search</h2>\n            <InputGroup >\n            <InputGroupAddon addonType=\"append\"> Search </InputGroupAddon>\n            <Input\n                onChange={(e) =>\n                setQuery(e.target.value.toLocaleLowerCase())\n                }\n                value={query}\n            />\n            </InputGroup><br></br>\n        </div>\n        <Dishes search={query} />\n       \n         </ApolloProvider>\n        <Row xs='3'>\n          {renderDishes(restaurantID)}\n        </Row>\n\n      </Container>\n\n    )\n  } else {\n    return <h1> No Restaurants Found</h1>\n  }\n}\nexport default RestaurantList"]},"metadata":{},"sourceType":"module"}