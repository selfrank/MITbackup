{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarah\\\\MIT_xpro\\\\Module_28\\\\settingup_graphql\\\\components\\\\dishesList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction DishesList(props) {\n  const {\n    0: dishesID,\n    1: setDishesID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS_DISHES = gql`\n  query {\n    restaurant {\n      id\n      name\n      dishes {\n        id\n        name\n        description\n        price\n        image {\n          url\n        }\n      }\n    }\n  }\n`;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS_DISHES);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Not found\"); //console.log(`Query Data: ${data.restaurants}`);\n\n  let searchQuery = data.restaurants.dishes.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n  let restId = searchQuery[0] ? searchQuery[0].id : null; //console.log(\"restId: \", restId);\n  // definet renderer for Dishes\n\n  const renderDishes = dishesID => {\n    return __jsx(Dishes, {\n      restId: dishesID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setDishesID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default DishesList;","map":{"version":3,"sources":["C:/Users/sarah/MIT_xpro/Module_28/settingup_graphql/components/dishesList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","DishesList","props","dishesID","setDishesID","cart","state","setState","GET_RESTAURANTS_DISHES","loading","error","data","searchQuery","restaurants","dishes","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","margin","height","image","url","description","restaurantID"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport Dishes from \"./dishes\"\r\nimport { useContext, useState } from 'react';\r\n\r\n\r\nimport AppContext from \"./context\"\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardText,\r\n  CardTitle,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\nfunction DishesList(props) {\r\n  const [dishesID, setDishesID] = useState(0)\r\n  const { cart } = useContext(AppContext);\r\n  const [state, setState] = useState(cart)\r\n  const GET_RESTAURANTS_DISHES = gql`\r\n  query {\r\n    restaurant {\r\n      id\r\n      name\r\n      dishes {\r\n        id\r\n        name\r\n        description\r\n        price\r\n        image {\r\n          url\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n  const { loading, error, data } = useQuery(GET_RESTAURANTS_DISHES)\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>ERROR</p>;\r\n  if (!data) return <p>Not found</p>;\r\n  //console.log(`Query Data: ${data.restaurants}`);\r\n \r\n\r\n\r\n  let searchQuery = data.restaurants.dishes.filter((res) => {\r\n    return res.name.toLowerCase().includes(props.search)\r\n  }) || [];\r\n\r\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\r\n//console.log(\"restId: \", restId);\r\n  // definet renderer for Dishes\r\n  const renderDishes = (dishesID) => {\r\n    return (<Dishes restId={dishesID}> </Dishes>)\r\n  };\r\n  if (searchQuery.length > 0) {\r\n    const restList = searchQuery.map((res) => (\r\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\r\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\r\n          <CardImg\r\n            top={true}\r\n            style={{ height: 200 }}\r\n            src={\r\n              `http://localhost:1337` + res.image.url\r\n            }\r\n          />\r\n          <CardBody>\r\n            <CardText>{res.description}</CardText>\r\n          </CardBody>\r\n          <div className=\"card-footer\">\r\n          \r\n            <Button color=\"info\" onClick={() => setDishesID(res.id)}>{res.name}</Button>\r\n\r\n          </div>\r\n        </Card>\r\n      </Col>\r\n    ))\r\n\r\n    return (\r\n\r\n      <Container>\r\n        <Row xs='3'>\r\n          {restList}\r\n        </Row>\r\n\r\n        <Row xs='3'>\r\n          {renderDishes(restaurantID)}\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n    )\r\n  } else {\r\n    return <h1> No Restaurants Found</h1>\r\n  }\r\n}\r\nexport default DishesList"]},"metadata":{},"sourceType":"module"}